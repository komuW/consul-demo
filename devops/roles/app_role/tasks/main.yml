---
# tasks file for app_server
- name: Update package cache if older than 18000sec
  apt: update_cache=yes cache_valid_time=18000

- name: Install system packages
  apt: pkg={{ item }} state=present
  with_items:
    - build-essential
    - python-dev
    - python-setuptools
    - python-pip
    - authbind
    - supervisor
    - monit
    - git
    - screen
    - curl
    - ntp
    - rabbitmq-server

- name: Ensure pip is up-to-date
  command: pip install --upgrade pip

- name: Install Python packages
  pip: name={{ item }}
  with_items: 
    - virtualenv
    - virtualenvwrapper

- name: Allow app to bind to port 80
  file: path=/etc/authbind/byport/80 state=touch
        owner={{ APP_USER }} group={{ APP_USER }} mode=755

- name: Write supervisord.conf
  template: dest=/etc/supervisor/supervisord.conf
            src=supervisord.conf.j2
            backup=yes

- name: Set supervisor to run on boot
  service: name=supervisor enabled=yes

- name: Link to app-specific supervisor configuration
  file: >
    src={{ APP_DIR }}/supervisord.conf
    dest=/etc/supervisor/conf.d/{{ APP_NAME }}.conf
    state=link force=yes

- name: Write logrotate.conf
  template: src=logrotate.conf.j2 dest=/etc/logrotate.d/{{ APP_NAME }}
            backup=yes

- name: Schedule logrotate cron job
  cron: name="rotate {{ APP_NAME }} logs" special_time=hourly
        job="/usr/sbin/logrotate /etc/logrotate.d/{{ APP_NAME }}"

- name: cd to APP_DIR
  lineinfile: line="cd {{APP_DIR}}" dest={{ APP_HOME }}/.bashrc backup=yes
  when: APP_ENVIRONMENT == "development"

- name: Start ntp service
  service: name=ntp enabled=yes state=started

- name: add celery_user user
  user: name={{ CELERY_USER }} groups=sudo
  when: ROOT_USER_BOX

- name: source profile
  shell: . ~/.profile
  sudo: yes
  sudo_user: "{{ansible_ssh_user}}"

- name: Configure virtualenvwrapper
  lineinfile: line="{{ item }}" dest={{ APP_HOME }}/.bashrc
              backup=yes
  with_items:
    - export WORKON_HOME=$HOME/.virtualenvs
    - source /usr/local/bin/virtualenvwrapper.sh

- name: Build dependencies for Python Postgres adapter
  command: sudo apt-get -y build-dep python-psycopg2

- name: source virtualenv
  lineinfile: line="source {{APP_VIRTUALENV}}/bin/activate"
              backup=yes
              dest=~/.profile
  when: APP_ENVIRONMENT == "development"
  sudo: yes
  sudo_user: "{{ansible_ssh_user}}"

- name: change to project directory
  lineinfile: line="cd {{APP_DIR}}"
              backup=yes
              dest=~/.profile
  when: APP_ENVIRONMENT == "development"
  sudo: yes
  sudo_user: "{{ansible_ssh_user}}"